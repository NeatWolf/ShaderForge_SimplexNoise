// Shader created with Shader Forge v1.27 
// Shader Forge (c) Neat Corporation / Joachim Holmer - http://www.acegikmo.com/shaderforge/
// Note: Manually altering this data may prevent you from opening it in Shader Forge
/*SF_DATA;ver:1.27;sub:START;pass:START;ps:flbk:Legacy Shaders/Diffuse,iptp:0,cusa:False,bamd:0,lico:1,lgpr:1,limd:0,spmd:1,trmd:0,grmd:0,uamb:True,mssp:True,bkdf:False,hqlp:False,rprd:False,enco:False,rmgx:True,rpth:0,vtps:0,hqsc:True,nrmq:1,nrsp:0,vomd:0,spxs:False,tesm:0,olmd:1,culm:0,bsrc:0,bdst:1,dpts:2,wrdp:True,dith:0,rfrpo:True,rfrpn:,coma:15,ufog:True,aust:True,igpj:False,qofs:0,qpre:1,rntp:1,fgom:False,fgoc:False,fgod:False,fgor:False,fgmd:0,fgcr:0.5,fgcg:0.5,fgcb:0.5,fgca:1,fgde:0.01,fgrn:0,fgrf:300,stcl:False,stva:128,stmr:255,stmw:255,stcp:6,stps:0,stfa:0,stfz:0,ofsf:0,ofsu:0,f2p0:False,fnsp:True,fnfb:True;n:type:ShaderForge.SFN_Final,id:4795,x:33137,y:32664,varname:node_4795,prsc:2|emission-9425-OUT;n:type:ShaderForge.SFN_Code,id:9425,x:32025,y:32752,varname:node_9425,prsc:2,code:,output:4,fname:SimplexNoise,width:710,height:451,input:2,input:8,input:4,input:4,input:4,input:4,input_1_label:pos,input_2_label:octaves,input_3_label:frequency,input_4_label:amplitude,input_5_label:lacunarity,input_6_label:persistence|A-8930-XYZ,B-4266-OUT,C-4596-OUT,D-5539-OUT,E-4925-OUT,F-9213-OUT;n:type:ShaderForge.SFN_ValueProperty,id:4596,x:31717,y:32919,ptovrint:False,ptlb:Noise Frequency,ptin:_NoiseFrequency,varname:_Frequency,prsc:1,glob:False,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,v1:20;n:type:ShaderForge.SFN_ValueProperty,id:4266,x:31717,y:32841,ptovrint:False,ptlb:Noise Octaves,ptin:_NoiseOctaves,varname:_Octaves,prsc:0,glob:False,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,v1:3;n:type:ShaderForge.SFN_ValueProperty,id:5539,x:31717,y:33001,ptovrint:False,ptlb:Noise Amplitude,ptin:_NoiseAmplitude,varname:_Amplitude,prsc:1,glob:False,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,v1:0.8;n:type:ShaderForge.SFN_ValueProperty,id:4925,x:31717,y:33086,ptovrint:False,ptlb:Noise Lacunarity,ptin:_NoiseLacunarity,varname:_Lacunarity,prsc:1,glob:False,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,v1:1.2;n:type:ShaderForge.SFN_ValueProperty,id:9213,x:31717,y:33171,ptovrint:False,ptlb:Noise Persistence,ptin:_NoisePersistence,varname:_Persistence,prsc:1,glob:False,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,v1:0.8;n:type:ShaderForge.SFN_FragmentPosition,id:8930,x:31717,y:32665,varname:node_8930,prsc:2;proporder:4596-4266-5539-4925-9213;pass:END;sub:END;*/

Shader "Shader Forge/Simplex_SF" {
    Properties {
        _NoiseFrequency ("Noise Frequency", Float ) = 20
        _NoiseOctaves ("Noise Octaves", Float ) = 3
        _NoiseAmplitude ("Noise Amplitude", Float ) = 0.8
        _NoiseLacunarity ("Noise Lacunarity", Float ) = 1.2
        _NoisePersistence ("Noise Persistence", Float ) = 0.8
    }
    SubShader {
        Tags {
            "RenderType"="Opaque"
        }
        Pass {
            Name "FORWARD"
            Tags {
                "LightMode"="ForwardBase"
            }
            
            
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #define UNITY_PASS_FORWARDBASE
            #include "UnityCG.cginc"
            #pragma multi_compile_fwdbase_fullshadows
            #pragma multi_compile_fog
            #pragma exclude_renderers gles3 metal d3d11_9x xbox360 xboxone ps3 ps4 psp2 
            #pragma target 3.0
            half SimplexNoise( float3 pos , fixed octaves , half frequency , half amplitude , half lacunarity , half persistence ){
            half sum = 0;
            float3 originalPosition = pos;
            for (int i = 0; i < octaves; i++)
            {
            //START FUNCTION float SimplexPerlin3D (float3 pos) -------------------------------------------------------------------------------------------
            pos = originalPosition * frequency;
            
            //START FUNCTION Simplex3D_GetCornerVectors(float3 pos, out float3 Pi, out float3 Pi_1,	out float3 Pi_2, out float4 v1234_x, out float4 v1234_y, out float4 v1234_z ) ------
            //	simplex math constants
            const float SKEWFACTOR = 1.0/3.0;
            const float UNSKEWFACTOR = 1.0/6.0;
            const float SIMPLEX_CORNER_POS = 0.5;
            const float SIMPLEX_PYRAMID_HEIGHT = 0.70710678118654752440084436210485;	// sqrt( 0.5 )	height of simplex pyramid.
            
            pos *= SIMPLEX_PYRAMID_HEIGHT;		// scale space so we can have an approx feature size of 1.0  ( optional )
            
            //	Find the vectors to the corners of our simplex pyramid
            float3 Pi = floor( pos + dot( pos, float3( SKEWFACTOR, SKEWFACTOR, SKEWFACTOR) ) );
            float3 x0 = pos - Pi + dot(Pi, float3( UNSKEWFACTOR, UNSKEWFACTOR, UNSKEWFACTOR ) );
            float3 g = step(x0.yzx, x0.xyz);
            float3 l = 1.0 - g;
            float3 Pi_1 = min( g.xyz, l.zxy );
            float3 Pi_2 = max( g.xyz, l.zxy );
            float3 x1 = x0 - Pi_1 + UNSKEWFACTOR;
            float3 x2 = x0 - Pi_2 + SKEWFACTOR;
            float3 x3 = x0 - SIMPLEX_CORNER_POS;
            
            //	pack them into a parallel-friendly arrangement
            float4 v1234_x = float4( x0.x, x1.x, x2.x, x3.x );
            float4 v1234_y = float4( x0.y, x1.y, x2.y, x3.y );
            float4 v1234_z = float4( x0.z, x1.z, x2.z, x3.z );
            //END FUNCTION ---------------------------------------------------------------------------------------------------------------------------------
            
            
            //START FUNCTION FastHash (float3 gridcell, float3 v1_mask, float3 v2_mask) -----------------------------------------------------------------------------
            const float2 OFFSET = float2( 50.0, 161.0 );
            const float DOMAIN = 69.0;
            const float3 SOMELARGEFLOATS = float3( 635.298681, 682.357502, 668.926525 );
            const float3 ZINC = float3( 48.500388, 65.294118, 63.934599 );
            
            //	truncate the domain
            Pi.xyz = Pi.xyz - floor(Pi.xyz * ( 1.0 / DOMAIN )) * DOMAIN;
            float3 Pi_inc1 = step( Pi, float3( DOMAIN - 1.5, DOMAIN - 1.5, DOMAIN - 1.5) ) * ( Pi + 1.0 );
            
            //	compute x*x*y*y for the 4 corners
            float4 P = float4( Pi.xy, Pi_inc1.xy ) + OFFSET.xyxy;
            P *= P;
            float4 V1xy_V2xy = lerp( P.xyxy, P.zwzw, float4( Pi_1.xy, Pi_2.xy ) );		//	apply mask for v1 and v2
            P = float4( P.x, V1xy_V2xy.xz, P.z ) * float4( P.y, V1xy_V2xy.yw, P.w );
            
            //	get the lowz and highz mods
            float3 lowz_mods = float3( 1.0 / ( SOMELARGEFLOATS.xyz + Pi.zzz * ZINC.xyz ) );
            float3 highz_mods = float3( 1.0 / ( SOMELARGEFLOATS.xyz + Pi_inc1.zzz * ZINC.xyz ) );
            
            //	apply mask for v1 and v2 mod values
            Pi_1 = ( Pi_1.z < 0.5 ) ? lowz_mods : highz_mods;
            Pi_2 = ( Pi_2.z < 0.5 ) ? lowz_mods : highz_mods;
            
            //	compute the final hash
            float4 hash_0 = frac( P * float4( lowz_mods.x, Pi_1.x, Pi_2.x, highz_mods.x ) ) - 0.49999;
            float4 hash_1 = frac( P * float4( lowz_mods.y, Pi_1.y, Pi_2.y, highz_mods.y ) ) - 0.49999;
            float4 hash_2 = frac( P * float4( lowz_mods.z, Pi_1.z, Pi_2.z, highz_mods.z ) ) - 0.49999;
            //END FUNCTION ---------------------------------------------------------------------------------------------------------------------------------
            
            //	evaluate gradients
            float4 grad_results = rsqrt( hash_0 * hash_0 + hash_1 * hash_1 + hash_2 * hash_2 ) * ( hash_0 * v1234_x + hash_1 * v1234_y + hash_2 * v1234_z );
            
            const float FINAL_NORMALIZATION = 37.837227241611314102871574478976;
            
            //START FUNCTION Simplex3D_GetSurfletWeights(float4 v1234_x, float4 v1234_y, float4 v1234_z ) ----------------------------------------------------------------------
            float4 surflet_weights = v1234_x * v1234_x + v1234_y * v1234_y + v1234_z * v1234_z;
            surflet_weights = max(0.5 - surflet_weights, 0.0);		//	0.5 here represents the closest distance (squared) of any simplex pyramid corner to any of its planes.  ie, SIMPLEX_PYRAMID_HEIGHT^2
            surflet_weights *= surflet_weights*surflet_weights;
            //END FUNCTION ---------------------------------------------------------------------------------------------------------------------------------
            
            
            half h = dot(surflet_weights , grad_results ) * FINAL_NORMALIZATION;
            //END FUNCTION ---------------------------------------------------------------------------------------------------------------------------------
            
            
            sum += h*amplitude;
            frequency *= lacunarity;
            amplitude *= persistence;
            }
            return sum * 0.5 + 0.5;
            }
            
            uniform half _NoiseFrequency;
            uniform fixed _NoiseOctaves;
            uniform half _NoiseAmplitude;
            uniform half _NoiseLacunarity;
            uniform half _NoisePersistence;
            struct VertexInput {
                float4 vertex : POSITION;
            };
            struct VertexOutput {
                float4 pos : SV_POSITION;
                float4 posWorld : TEXCOORD0;
                UNITY_FOG_COORDS(1)
            };
            VertexOutput vert (VertexInput v) {
                VertexOutput o = (VertexOutput)0;
                o.posWorld = mul(_Object2World, v.vertex);
                o.pos = mul(UNITY_MATRIX_MVP, v.vertex );
                UNITY_TRANSFER_FOG(o,o.pos);
                return o;
            }
            float4 frag(VertexOutput i) : COLOR {
////// Lighting:
////// Emissive:
                float node_9425 = SimplexNoise( i.posWorld.rgb , _NoiseOctaves , _NoiseFrequency , _NoiseAmplitude , _NoiseLacunarity , _NoisePersistence );
                float3 emissive = float3(node_9425,node_9425,node_9425);
                float3 finalColor = emissive;
                fixed4 finalRGBA = fixed4(finalColor,1);
                UNITY_APPLY_FOG(i.fogCoord, finalRGBA);
                return finalRGBA;
            }
            ENDCG
        }
    }
    CustomEditor "ShaderForgeMaterialInspector"
}
